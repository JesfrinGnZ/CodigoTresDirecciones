
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gnz.backend.analizadores;

import gnz.backend.cuarteto.ManejadorDeCuartetos;
import gnz.frontend.editorDeTexto.EditorDeTextoFrame;
import java_cup.runtime.*;
import gnz.backend.errores.ManejadorDeErrores;
import gnz.backend.instrucciones.*;
import gnz.backend.manejoDeDatos.*;
import gnz.backend.tablaDeSimbolos.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\004\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\005\000\002" +
    "\036\002\000\002\015\006\000\002\037\002\000\002\015" +
    "\006\000\002\015\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\004\003\000\002\005\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\005" +
    "\000\002\004\003\000\002\016\006\000\002\016\006\000" +
    "\002\004\003\000\002\017\011\000\002\020\005\000\002" +
    "\020\003\000\002\021\003\000\002\004\003\000\002\022" +
    "\011\000\002\022\007\000\002\004\003\000\002\023\007" +
    "\000\002\023\005\000\002\004\003\000\002\024\004\000" +
    "\002\024\010\000\002\025\004\000\002\025\003\000\002" +
    "\026\011\000\002\004\003\000\002\027\011\000\002\027" +
    "\007\000\002\004\003\000\002\030\012\000\002\004\003" +
    "\000\002\031\015\000\002\031\013\000\002\032\004\000" +
    "\002\032\004\000\002\004\003\000\002\033\006\000\002" +
    "\033\006\000\002\034\005\000\002\034\003\000\002\035" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\044\003\027\007\030\010\017\013\010\015" +
    "\011\016\006\017\004\020\022\021\042\025\021\051\013" +
    "\054\007\055\015\056\034\060\037\061\026\062\024\001" +
    "\002\000\006\007\ufff8\047\ufff8\001\002\000\046\002\000" +
    "\003\027\007\030\010\017\013\010\015\011\016\006\017" +
    "\004\020\022\021\042\025\021\051\013\054\007\055\015" +
    "\056\034\060\037\061\026\062\024\001\002\000\006\007" +
    "\ufff9\047\ufff9\001\002\000\004\045\241\001\002\000\006" +
    "\007\ufffb\047\ufffb\001\002\000\006\007\ufffa\047\ufffa\001" +
    "\002\000\054\002\uffcc\003\uffcc\007\uffcc\010\uffcc\013\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\025\uffcc\050" +
    "\uffcc\051\uffcc\052\220\053\216\054\uffcc\055\uffcc\056\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\001\002\000\004\045\207\001" +
    "\002\000\054\002\uffd1\003\uffd1\007\uffd1\010\uffd1\013\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\025\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\001\002\000\004\047\200\001" +
    "\002\000\004\007\056\001\002\000\006\007\ufffc\047\ufffc" +
    "\001\002\000\004\002\172\001\002\000\006\007\ufffd\047" +
    "\ufffd\001\002\000\006\007\ufff7\047\ufff7\001\002\000\054" +
    "\002\uffdb\003\uffdb\007\uffdb\010\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\025\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\001\002\000\004\047\167\001\002\000\054" +
    "\002\uffc6\003\uffc6\007\uffc6\010\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\025\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\001\002\000\004\047\160\001\002\000\054" +
    "\002\ufff5\003\ufff5\007\ufff5\010\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\025\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\001\002\000\004\005\153\001\002\000\054" +
    "\002\uffbb\003\uffbb\007\uffbb\010\uffbb\013\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\025\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\001\002\000\054\002\uffc9\003\uffc9\007\uffc9" +
    "\010\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\025\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\060\uffc9\061\uffc9\062\uffc9\001\002\000" +
    "\054\002\uffd4\003\uffd4\007\uffd4\010\uffd4\013\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\025\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\001\002\000\004\045\055\001\002\000" +
    "\050\002\ufffe\003\ufffe\007\ufffe\010\ufffe\013\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\021\ufffe\025\ufffe\050\ufffe\051" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\001\002\000\054\002\uffb6\003\uffb6\007\uffb6\010\uffb6\013" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\025\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\001\002\000\022\010\017" +
    "\013\010\015\011\016\006\017\004\020\022\021\042\025" +
    "\021\001\002\000\054\002\uffc0\003\uffc0\007\uffc0\010\uffc0" +
    "\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\025" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002\000\054\002" +
    "\uffbd\003\uffbd\007\uffbd\010\uffbd\013\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\025\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\001\002\000\006\007\ufff6\047\ufff6\001\002\000" +
    "\004\047\044\001\002\000\004\022\045\001\002\000\004" +
    "\050\046\001\002\000\004\007\050\001\002\000\006\004" +
    "\053\006\052\001\002\000\006\004\uffcd\006\uffcd\001\002" +
    "\000\006\004\uffce\006\uffce\001\002\000\004\007\050\001" +
    "\002\000\054\002\uffd0\003\uffd0\007\uffd0\010\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\025\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\001\002\000\006\004\uffcf\006" +
    "\uffcf\001\002\000\004\007\056\001\002\000\012\004\uffd7" +
    "\005\076\006\uffd7\057\uffd7\001\002\000\004\057\060\001" +
    "\002\000\002\001\002\000\004\057\062\001\002\000\006" +
    "\027\063\031\065\001\002\000\004\022\075\001\002\000" +
    "\004\046\067\001\002\000\004\022\066\001\002\000\004" +
    "\046\uffb7\001\002\000\046\003\027\007\030\010\017\013" +
    "\010\015\011\016\006\017\004\020\022\021\042\025\021" +
    "\047\071\051\013\054\007\055\015\056\034\060\037\061" +
    "\026\062\024\001\002\000\054\002\uffb9\003\uffb9\007\uffb9" +
    "\010\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\025\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002\000" +
    "\044\003\027\007\030\010\017\013\010\015\011\016\006" +
    "\017\004\020\022\021\042\025\021\051\013\054\007\055" +
    "\015\056\034\060\037\061\026\062\024\001\002\000\046" +
    "\003\027\007\030\010\017\013\010\015\011\016\006\017" +
    "\004\020\022\021\042\025\021\050\073\051\013\054\007" +
    "\055\015\056\034\060\037\061\026\062\024\001\002\000" +
    "\054\002\uffba\003\uffba\007\uffba\010\uffba\013\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\025\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba" +
    "\061\uffba\062\uffba\001\002\000\050\002\uffff\003\uffff\007" +
    "\uffff\010\uffff\013\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\025\uffff\050\uffff\051\uffff\054\uffff\055\uffff\056" +
    "\uffff\060\uffff\061\uffff\062\uffff\001\002\000\004\046\uffb8" +
    "\001\002\000\026\007\112\011\100\012\104\014\106\022" +
    "\101\023\111\024\102\026\077\042\110\045\107\001\002" +
    "\000\044\004\uffea\006\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\043\uffea\044\uffea\046\uffea\057\uffea\001\002\000" +
    "\016\004\uffe3\006\uffe3\043\uffe3\044\uffe3\046\uffe3\057\uffe3" +
    "\001\002\000\044\004\uffee\006\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\043\uffee\044\uffee\046\uffee\057\uffee\001" +
    "\002\000\044\004\uffec\006\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\043\uffec\044\uffec\046\uffec\057\uffec\001\002" +
    "\000\036\004\uffd6\006\uffd6\027\131\030\126\031\123\032" +
    "\133\033\130\034\124\035\132\036\135\037\125\040\127" +
    "\041\134\057\uffd6\001\002\000\016\004\uffe2\006\uffe2\043" +
    "\uffe2\044\uffe2\046\uffe2\057\uffe2\001\002\000\014\004\uffd5" +
    "\006\uffd5\043\115\044\116\057\uffd5\001\002\000\044\004" +
    "\uffeb\006\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\043" +
    "\uffeb\044\uffeb\046\uffeb\057\uffeb\001\002\000\020\007\112" +
    "\014\106\022\101\023\111\024\102\026\077\045\107\001" +
    "\002\000\026\007\112\011\100\012\104\014\106\022\101" +
    "\023\111\024\102\026\077\042\110\045\107\001\002\000" +
    "\044\004\uffed\006\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\043\uffed\044\uffed\046\uffed\057\uffed\001\002\000\044" +
    "\004\uffef\006\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\043\uffef\044\uffef\046\uffef\057\uffef\001\002\000\030\027" +
    "\131\030\126\031\123\032\133\033\130\034\124\035\132" +
    "\036\135\037\125\040\127\041\134\001\002\000\016\004" +
    "\uffe4\006\uffe4\043\uffe4\044\uffe4\046\uffe4\057\uffe4\001\002" +
    "\000\026\007\uffe8\011\uffe8\012\uffe8\014\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\026\uffe8\042\uffe8\045\uffe8\001\002\000\026" +
    "\007\uffe6\011\uffe6\012\uffe6\014\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\026\uffe6\042\uffe6\045\uffe6\001\002\000\026\007\112" +
    "\011\100\012\104\014\106\022\101\023\111\024\102\026" +
    "\077\042\110\045\107\001\002\000\016\004\uffe5\006\uffe5" +
    "\043\uffe5\044\uffe5\046\uffe5\057\uffe5\001\002\000\026\007" +
    "\112\011\100\012\104\014\106\022\101\023\111\024\102" +
    "\026\077\042\110\045\107\001\002\000\016\004\uffe7\006" +
    "\uffe7\043\uffe7\044\uffe7\046\uffe7\057\uffe7\001\002\000\020" +
    "\007\112\014\106\022\101\023\111\024\102\026\077\045" +
    "\107\001\002\000\020\007\112\014\106\022\101\023\111" +
    "\024\102\026\077\045\107\001\002\000\020\007\112\014" +
    "\106\022\101\023\111\024\102\026\077\045\107\001\002" +
    "\000\020\007\112\014\106\022\101\023\111\024\102\026" +
    "\077\045\107\001\002\000\020\007\112\014\106\022\101" +
    "\023\111\024\102\026\077\045\107\001\002\000\020\007" +
    "\112\014\106\022\101\023\111\024\102\026\077\045\107" +
    "\001\002\000\020\007\112\014\106\022\101\023\111\024" +
    "\102\026\077\045\107\001\002\000\020\007\112\014\106" +
    "\022\101\023\111\024\102\026\077\045\107\001\002\000" +
    "\020\007\112\014\106\022\101\023\111\024\102\026\077" +
    "\045\107\001\002\000\020\007\112\014\106\022\101\023" +
    "\111\024\102\026\077\045\107\001\002\000\020\007\112" +
    "\014\106\022\101\023\111\024\102\026\077\045\107\001" +
    "\002\000\030\004\uffdf\006\uffdf\027\131\030\126\031\123" +
    "\032\133\033\130\043\uffdf\044\uffdf\046\uffdf\057\uffdf\001" +
    "\002\000\030\004\uffdc\006\uffdc\027\131\030\126\031\123" +
    "\032\133\033\130\043\uffdc\044\uffdc\046\uffdc\057\uffdc\001" +
    "\002\000\044\004\ufff1\006\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\043\ufff1\044\ufff1\046\ufff1\057\ufff1\001\002" +
    "\000\030\004\uffe0\006\uffe0\027\131\030\126\031\123\032" +
    "\133\033\130\043\uffe0\044\uffe0\046\uffe0\057\uffe0\001\002" +
    "\000\044\004\ufff4\006\ufff4\027\ufff4\030\126\031\ufff4\032" +
    "\133\033\130\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\043\ufff4\044\ufff4\046\ufff4\057\ufff4\001\002\000" +
    "\044\004\ufff0\006\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\043\ufff0\044\ufff0\046\ufff0\057\ufff0\001\002\000\030" +
    "\004\uffdd\006\uffdd\027\131\030\126\031\123\032\133\033" +
    "\130\043\uffdd\044\uffdd\046\uffdd\057\uffdd\001\002\000\044" +
    "\004\ufff2\006\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\043\ufff2\044\ufff2\046\ufff2\057\ufff2\001\002\000\030\004" +
    "\uffde\006\uffde\027\131\030\126\031\123\032\133\033\130" +
    "\043\uffde\044\uffde\046\uffde\057\uffde\001\002\000\030\004" +
    "\uffe1\006\uffe1\027\131\030\126\031\123\032\133\033\130" +
    "\043\uffe1\044\uffe1\046\uffe1\057\uffe1\001\002\000\044\004" +
    "\ufff3\006\ufff3\027\ufff3\030\126\031\ufff3\032\133\033\130" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043" +
    "\ufff3\044\ufff3\046\ufff3\057\ufff3\001\002\000\016\027\131" +
    "\030\126\031\123\032\133\033\130\046\152\001\002\000" +
    "\044\004\uffe9\006\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\043\uffe9\044\uffe9\046\uffe9\057\uffe9\001\002\000\026" +
    "\007\112\011\100\012\104\014\106\022\101\023\111\024" +
    "\102\026\077\042\110\045\107\001\002\000\032\004\157" +
    "\027\131\030\126\031\123\032\133\033\130\034\124\035" +
    "\132\036\135\037\125\040\127\041\134\001\002\000\010" +
    "\004\156\043\115\044\116\001\002\000\054\002\uffd2\003" +
    "\uffd2\007\uffd2\010\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\025\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\001\002\000\054\002\uffd3\003\uffd3\007\uffd3\010\uffd3\013" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\025\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002\000\002\001\002" +
    "\000\006\006\164\050\165\001\002\000\006\006\uffb1\050" +
    "\uffb1\001\002\000\006\006\uffb2\050\uffb2\001\002\000\002" +
    "\001\002\000\054\002\uffb5\003\uffb5\007\uffb5\010\uffb5\013" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000\006\006\uffb3" +
    "\050\uffb3\001\002\000\002\001\002\000\006\006\164\050" +
    "\171\001\002\000\054\002\uffb4\003\uffb4\007\uffb4\010\uffb4" +
    "\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\025" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\004\002" +
    "\001\001\002\000\006\004\uffd8\006\uffd8\001\002\000\006" +
    "\004\176\006\175\001\002\000\004\007\056\001\002\000" +
    "\054\002\uffda\003\uffda\007\uffda\010\uffda\013\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\025\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\060\uffda" +
    "\061\uffda\062\uffda\001\002\000\006\004\uffd9\006\uffd9\001" +
    "\002\000\044\003\027\007\030\010\017\013\010\015\011" +
    "\016\006\017\004\020\022\021\042\025\021\051\013\054" +
    "\007\055\015\056\034\060\037\061\026\062\024\001\002" +
    "\000\046\003\027\007\030\010\017\013\010\015\011\016" +
    "\006\017\004\020\022\021\042\025\021\050\202\051\013" +
    "\054\007\055\015\056\034\060\037\061\026\062\024\001" +
    "\002\000\004\054\203\001\002\000\004\045\204\001\002" +
    "\000\002\001\002\000\004\046\206\001\002\000\054\002" +
    "\uffbc\003\uffbc\007\uffbc\010\uffbc\013\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\025\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\001\002\000\026\007\112\011\100\012\104\014" +
    "\106\022\101\023\111\024\102\026\077\042\110\045\107" +
    "\001\002\000\010\043\115\044\116\046\211\001\002\000" +
    "\046\003\027\007\030\010\017\013\010\015\011\016\006" +
    "\017\004\020\022\021\042\025\021\047\213\051\013\054" +
    "\007\055\015\056\034\060\037\061\026\062\024\001\002" +
    "\000\054\002\uffca\003\uffca\007\uffca\010\uffca\013\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\025\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\060" +
    "\uffca\061\uffca\062\uffca\001\002\000\044\003\027\007\030" +
    "\010\017\013\010\015\011\016\006\017\004\020\022\021" +
    "\042\025\021\051\013\054\007\055\015\056\034\060\037" +
    "\061\026\062\024\001\002\000\046\003\027\007\030\010" +
    "\017\013\010\015\011\016\006\017\004\020\022\021\042" +
    "\025\021\050\215\051\013\054\007\055\015\056\034\060" +
    "\037\061\026\062\024\001\002\000\054\002\uffcb\003\uffcb" +
    "\007\uffcb\010\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\025\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb\001" +
    "\002\000\046\003\027\007\030\010\017\013\010\015\011" +
    "\016\006\017\004\020\022\021\042\025\021\047\236\051" +
    "\013\054\007\055\015\056\034\060\037\061\026\062\024" +
    "\001\002\000\054\002\uffc5\003\uffc5\007\uffc5\010\uffc5\013" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\025\uffc5" +
    "\050\uffc5\051\uffc5\052\220\053\230\054\uffc5\055\uffc5\056" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000\004\045\222" +
    "\001\002\000\054\002\uffc2\003\uffc2\007\uffc2\010\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\025\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\026\007\112" +
    "\011\100\012\104\014\106\022\101\023\111\024\102\026" +
    "\077\042\110\045\107\001\002\000\010\043\115\044\116" +
    "\046\224\001\002\000\004\047\225\001\002\000\044\003" +
    "\027\007\030\010\017\013\010\015\011\016\006\017\004" +
    "\020\022\021\042\025\021\051\013\054\007\055\015\056" +
    "\034\060\037\061\026\062\024\001\002\000\046\003\027" +
    "\007\030\010\017\013\010\015\011\016\006\017\004\020" +
    "\022\021\042\025\021\050\227\051\013\054\007\055\015" +
    "\056\034\060\037\061\026\062\024\001\002\000\054\002" +
    "\uffc1\003\uffc1\007\uffc1\010\uffc1\013\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\025\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\001\002\000\004\047\232\001\002\000\054\002" +
    "\uffc3\003\uffc3\007\uffc3\010\uffc3\013\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\025\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\001\002\000\044\003\027\007\030\010\017\013" +
    "\010\015\011\016\006\017\004\020\022\021\042\025\021" +
    "\051\013\054\007\055\015\056\034\060\037\061\026\062" +
    "\024\001\002\000\046\003\027\007\030\010\017\013\010" +
    "\015\011\016\006\017\004\020\022\021\042\025\021\050" +
    "\234\051\013\054\007\055\015\056\034\060\037\061\026" +
    "\062\024\001\002\000\054\002\uffc4\003\uffc4\007\uffc4\010" +
    "\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\025\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\054" +
    "\002\uffc7\003\uffc7\007\uffc7\010\uffc7\013\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\025\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\001\002\000\044\003\027\007\030\010\017" +
    "\013\010\015\011\016\006\017\004\020\022\021\042\025" +
    "\021\051\013\054\007\055\015\056\034\060\037\061\026" +
    "\062\024\001\002\000\046\003\027\007\030\010\017\013" +
    "\010\015\011\016\006\017\004\020\022\021\042\025\021" +
    "\050\240\051\013\054\007\055\015\056\034\060\037\061" +
    "\026\062\024\001\002\000\054\002\uffc8\003\uffc8\007\uffc8" +
    "\010\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\025\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\060\uffc8\061\uffc8\062\uffc8\001\002\000" +
    "\002\001\002\000\004\046\243\001\002\000\046\003\027" +
    "\007\030\010\017\013\010\015\011\016\006\017\004\020" +
    "\022\021\042\025\021\047\245\051\013\054\007\055\015" +
    "\056\034\060\037\061\026\062\024\001\002\000\054\002" +
    "\uffbe\003\uffbe\007\uffbe\010\uffbe\013\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\025\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\001\002\000\044\003\027\007\030\010\017\013" +
    "\010\015\011\016\006\017\004\020\022\021\042\025\021" +
    "\051\013\054\007\055\015\056\034\060\037\061\026\062" +
    "\024\001\002\000\046\003\027\007\030\010\017\013\010" +
    "\015\011\016\006\017\004\020\022\021\042\025\021\050" +
    "\247\051\013\054\007\055\015\056\034\060\037\061\026" +
    "\062\024\001\002\000\054\002\uffbf\003\uffbf\007\uffbf\010" +
    "\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\025\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\036\002\017\003\004\004\034\005\022\006" +
    "\015\016\032\017\013\022\011\023\031\024\024\027\037" +
    "\030\040\031\030\033\035\001\001\000\002\001\001\000" +
    "\032\004\073\005\022\006\015\016\032\017\013\022\011" +
    "\023\031\024\024\027\037\030\040\031\030\033\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\216\026\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\173\010\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\046" +
    "\021\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\060\001\001\000\002" +
    "\001\001\000\004\032\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\067\005\022\006\015\016\032\017\013\022\011\023" +
    "\031\024\024\027\037\030\040\031\030\033\035\001\001" +
    "\000\002\001\001\000\034\003\071\004\034\005\022\006" +
    "\015\016\032\017\013\022\011\023\031\024\024\027\037" +
    "\030\040\031\030\033\035\001\001\000\032\004\073\005" +
    "\022\006\015\016\032\017\013\022\011\023\031\024\024" +
    "\027\037\030\040\031\030\033\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\102" +
    "\015\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\150\001\001\000\006\011\112\015\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\120\001\001\000\004\037\116\001\001" +
    "\000\006\011\112\015\117\001\001\000\002\001\001\000" +
    "\006\011\112\015\121\001\001\000\002\001\001\000\004" +
    "\011\147\001\001\000\004\011\146\001\001\000\004\011" +
    "\145\001\001\000\004\011\144\001\001\000\004\011\143" +
    "\001\001\000\004\011\142\001\001\000\004\011\141\001" +
    "\001\000\004\011\140\001\001\000\004\011\137\001\001" +
    "\000\004\011\136\001\001\000\004\011\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\153\015\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\161\034\160\035\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\161\035\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\161" +
    "\034\167\035\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\200\004\034\005\022\006\015\016\032" +
    "\017\013\022\011\023\031\024\024\027\037\030\040\031" +
    "\030\033\035\001\001\000\032\004\073\005\022\006\015" +
    "\016\032\017\013\022\011\023\031\024\024\027\037\030" +
    "\040\031\030\033\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\112\015\207\001\001\000\002" +
    "\001\001\000\032\004\211\005\022\006\015\016\032\017" +
    "\013\022\011\023\031\024\024\027\037\030\040\031\030" +
    "\033\035\001\001\000\002\001\001\000\034\003\213\004" +
    "\034\005\022\006\015\016\032\017\013\022\011\023\031" +
    "\024\024\027\037\030\040\031\030\033\035\001\001\000" +
    "\032\004\073\005\022\006\015\016\032\017\013\022\011" +
    "\023\031\024\024\027\037\030\040\031\030\033\035\001" +
    "\001\000\002\001\001\000\032\004\234\005\022\006\015" +
    "\016\032\017\013\022\011\023\031\024\024\027\037\030" +
    "\040\031\030\033\035\001\001\000\004\026\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\112\015" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\225\004\034\005\022\006\015\016\032\017\013\022" +
    "\011\023\031\024\024\027\037\030\040\031\030\033\035" +
    "\001\001\000\032\004\073\005\022\006\015\016\032\017" +
    "\013\022\011\023\031\024\024\027\037\030\040\031\030" +
    "\033\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\232\004\034\005\022\006\015" +
    "\016\032\017\013\022\011\023\031\024\024\027\037\030" +
    "\040\031\030\033\035\001\001\000\032\004\073\005\022" +
    "\006\015\016\032\017\013\022\011\023\031\024\024\027" +
    "\037\030\040\031\030\033\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\236\004\034\005\022\006" +
    "\015\016\032\017\013\022\011\023\031\024\024\027\037" +
    "\030\040\031\030\033\035\001\001\000\032\004\073\005" +
    "\022\006\015\016\032\017\013\022\011\023\031\024\024" +
    "\027\037\030\040\031\030\033\035\001\001\000\002\001" +
    "\001\000\004\014\241\001\001\000\002\001\001\000\032" +
    "\004\243\005\022\006\015\016\032\017\013\022\011\023" +
    "\031\024\024\027\037\030\040\031\030\033\035\001\001" +
    "\000\002\001\001\000\034\003\245\004\034\005\022\006" +
    "\015\016\032\017\013\022\011\023\031\024\024\027\037" +
    "\030\040\031\030\033\035\001\001\000\032\004\073\005" +
    "\022\006\015\016\032\017\013\022\011\023\031\024\024" +
    "\027\037\030\040\031\030\033\035\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private EditorDeTextoFrame editor;
    private ManejadorDeTipos manejadorDeTipos;
    private ManejadorDeCuartetos manCuarteto;
    private ManejadorDeTablaDeSimbolos tablaDeSimbolos;
    private Dato[] dato;
    private ManejadorDeDeclaracion manejadorDeclaracion;

    public parser(AnalizadorLexicoCodigo lex,EditorDeTextoFrame editor,ManejadorDeCuartetos manCuarteto){
        super(lex);
        this.editor=editor;
        this.manCuarteto = manCuarteto;
        this.manejadorDeTipos = new ManejadorDeTipos(manCuarteto,editor);
        this.tablaDeSimbolos = new ManejadorDeTablaDeSimbolos(this.editor, this.manCuarteto);
        this.manejadorDeclaracion = new ManejadorDeDeclaracion( manCuarteto, tablaDeSimbolos, editor);
    }
    
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        int columna = s.right;
        int linea = s.left;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        String estructura=(String)s.value;
        ManejadorDeErrores.mostrarErrorSintactico(editor.getErroresTextArea(), estructura, linea, columna,true,manCuarteto);

}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
        int columna = s.right;
        int linea = s.left;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        String estructura=(String)s.value;
        ManejadorDeErrores.mostrarErrorSintactico(editor.getErroresTextArea(), estructura, linea, columna,false,manCuarteto);
 }

    private DatoCodigo accionesParaExpresiones(DatoCodigo i,DatoCodigo e,Operacion operacion){
        Dato tipoMaximo=manejadorDeTipos.buscarDatoMayor(i, e);
        System.out.println("Tipo maximo es:"+tipoMaximo);
        manejadorDeTipos.asignarTipoDeDato(i,tipoMaximo);
        manejadorDeTipos.asignarTipoDeDato(e,tipoMaximo);
        return manejadorDeTipos.operarDatos(i,e,operacion);
    }
    
    




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipoDeVariable ::= STRING 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipoDeVariable ::= BOOLEAN 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato("booleano");RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipoDeVariable ::= CHAR 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoDeVariable ::= BYTE 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoDeVariable ::= INT 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoDeVariable ::= LONG 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoDeVariable ::= FLOAT 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoDeVariable ::= DOUBLE 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // unaInstruccion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= expresion MAS expresion 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.MAS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= expresion MENOS expresion 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.MENOS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion POR expresion 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.POR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= expresion DIV expresion 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.DIV);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= expresion PORCENTAJE expresion 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.RESTO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= IDENTIFICADOR 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    manCuarteto.setInicioDeExpresion();
    ElementoDeTablaDeSimbolos elemento=tablaDeSimbolos.buscarElemento(i);
    if(elemento==null){
    ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(),"Vaariable "+i+" no ha sido declarada", ileft, ileft,manCuarteto);
    RESULT=null;}//Error semantico, la variable no ha sido declarada
    else{DatoCodigo dato = new DatoCodigo(ileft,iright,elemento.getTipoBase(),elemento.getTipoNumerico(),i);
    RESULT=dato;
    }   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= NUMERO_ENTERO 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    manCuarteto.setInicioDeExpresion();
      DatoNumerico datoNum=manejadorDeTipos.verificarDato(i);
      DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,datoNum,i);//verificar segun rangos
      RESULT= dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= NUMERO_DECIMAL 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,DatoNumerico.DOUBLE,i);
      RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= NUMERO_DECIMALF 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,DatoNumerico.FLOAT,i);
     RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= DECLARACION_CARACTER 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,null,i.substring(1,2));
     RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= DECLARACION_STRING 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.CADENA,null,i.substring(1,i.length()-1));
     RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("RECONOCIDO PARENTESIS");RESULT= i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              DosEtiquetas RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas t1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if(t1 !=null){//Es la primera condicion
                    manCuarteto.crearCuartetoPrimeroParaComparacion(t1.getOperacion(), t1.getDato1(), t1.getDato2());
                }   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= condicion AND NT$0 condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas t1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas t2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                manCuarteto.crearSegundoCuartetoParaAnd(t2.getOperacion(), t2.getDato1(), t2.getDato2());
                RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              DosEtiquetas RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas t1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if(t1 !=null){//Es la primera condicion
                    if(t1.getTipoDeBoolean()|!t1.getTipoDeBoolean()){
                    System.out.println("NULLLLLLLLLLLLLLLLL");
                    }else{
                    manCuarteto.crearCuartetoPrimeroParaComparacion(t1.getOperacion(), t1.getDato1(), t1.getDato2());
                    }
                }   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= condicion OR NT$1 condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas t1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas t2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(t2.getTipoDeBoolean()|!t2.getTipoDeBoolean()){
                    System.out.println("NULLLLLLLLLLLLLLLLL");
                }else{
                   manCuarteto.crearSegundoCuartetoParaOr(t2.getOperacion(), t2.getDato1(), t2.getDato2());
                }
                RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= NOT condicion 
            {
              DosEtiquetas RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas t1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= TRUE 
            {
              DosEtiquetas RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DosEtiquetas dosEtiquetas = new DosEtiquetas(null, null, true, null);
        RESULT= dosEtiquetas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= FALSE 
            {
              DosEtiquetas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        DosEtiquetas dosEtiquetas = new DosEtiquetas(null, null, false, null);
        RESULT= dosEtiquetas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= expresion MENOR expresion 
            {
              DosEtiquetas RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo ex1 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo ex2 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MENOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= expresion MAYOR expresion 
            {
              DosEtiquetas RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo ex1 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo ex2 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MAYOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= expresion MENOR_IGUAL expresion 
            {
              DosEtiquetas RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo ex1 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo ex2 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MENORIGUAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= expresion MAYOR_IGUAL expresion 
            {
              DosEtiquetas RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo ex1 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo ex2 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MAYORIGUAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= expresion DISTINTO_DE expresion 
            {
              DosEtiquetas RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo ex1 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo ex2 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.DISTINTODE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= expresion IGUAL_A expresion 
            {
              DosEtiquetas RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo ex1 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo ex2 = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.IGUALA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unaInstruccion ::= declaracionDeVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionDeVariables ::= tipoDeVariable conjuntoDeIdentificadoresParaVariables PCOMA 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato[] datos = (Dato[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DeclaracionDeVariable> lista = (ArrayList<DeclaracionDeVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
//ManejadorDeDeclaracion manejador = new ManejadorDeDeclaracion(lista, manCuarteto, tablaDeSimbolos, editor);
//manejador.crearVariableComoCuarteto(datosleft,datosright, (TipoDeDato)datos[0],(DatoNumerico)datos[1]);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conjuntoDeIdentificadoresParaVariables ::= conjuntoDeIdentificadoresParaVariables COMA unIdentificadorParaVariable 
            {
              ArrayList<DeclaracionDeVariable> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<DeclaracionDeVariable> lista = (ArrayList<DeclaracionDeVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionDeVariable e = (DeclaracionDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(e);
     RESULT= lista;  
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conjuntoDeIdentificadoresParaVariables ::= unIdentificadorParaVariable 
            {
              ArrayList<DeclaracionDeVariable> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionDeVariable f = (DeclaracionDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<DeclaracionDeVariable> lista= new ArrayList<>();
      lista.add(f);
      RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unIdentificadorParaVariable ::= IDENTIFICADOR 
            {
              DeclaracionDeVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  int n=manCuarteto.getNumeroDeTemporal()-1;
  DeclaracionDeVariable declaracion = new DeclaracionDeVariable(i,"t"+n,null);
  manejadorDeclaracion.verificarYCrearTipoDeVariable(ileft, iright, declaracion, (TipoDeDato)dato[0], (DatoNumerico)dato[1],null);
  RESULT=declaracion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION expresion 
            {
              DeclaracionDeVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    DeclaracionDeVariable declaracion;
                if(e.getTemporal()==null){//Solo viene un id|num, solo uno
                    declaracion = new DeclaracionDeVariable(i, null, e);
                }else{
                    int n=manCuarteto.getNumeroDeTemporal()-1;
                    declaracion = new DeclaracionDeVariable(i,"t"+n,e);
                }
manejadorDeclaracion.crearVariableComoCuarteto(declaracion,ileft,iright, (TipoDeDato)dato[0],(DatoNumerico)dato[1]);
                    RESULT=declaracion;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION condicion 
            {
              DeclaracionDeVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dosEtiquetasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dosEtiquetasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas dosEtiquetas = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TipoDeDato d= (TipoDeDato)dato[0];
                if(d==TipoDeDato.BOOLEANO){
                    if(dosEtiquetas!=null){
                        manCuarteto.crearCuartetoPrimeroParaComparacion(dosEtiquetas.getOperacion(), dosEtiquetas.getDato1(),dosEtiquetas.getDato2());
                        }
                        manejadorDeclaracion.asignarValorABooleano(i, ileft, iright);
                }else{
                    String mensaje="No se puede transaformar a booleano";
                  ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, ileft, iright, manCuarteto);
                }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unaInstruccion ::= asignacionDeVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION expresion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION condicion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unaInstruccion ::= declaracionDeArreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracionDeArreglos ::= ARRAY tipoDeVariable CORCHETE_ABIERTO NUMERO_ENTERO CORCHETE_CERRADO conjuntoDeIdentificadoresParaArreglo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeArreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conjuntoDeIdentificadoresParaArreglo ::= conjuntoDeIdentificadoresParaArreglo COMA unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // conjuntoDeIdentificadoresParaArreglo ::= unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unIdentificadorParaArreglo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaArreglo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unaInstruccion ::= declaracionDeEstructuraIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unaInstruccion ::= declaracionDeEstructuraIfElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unaInstruccion ::= declaracionDeEstructuraElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conjuntoDeElseIf ::= conjuntoDeElseIf unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conjuntoDeElseIf ::= unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unElseIf ::= ELSIF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unaInstruccion ::= declaracionDeEstructuraWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unaInstruccion ::= declaracionDeEstructuraDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracionDeEstructuraDoWhile ::= DO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unaInstruccion ::= declaracionDeEstructuraFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO unIdentificadorParaVariable DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO unIdentificadorParaVariable DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // incrementoDecremento ::= MAS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // incrementoDecremento ::= MENOS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unaInstruccion ::= declaracionDeFuncionesPredefinidas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracionDeFuncionesPredefinidas ::= PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionDeFuncionesPredefinidas ::= PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conjuntoDeTexto ::= conjuntoDeTexto COMA unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conjuntoDeTexto ::= unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unTexto ::= f 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
