
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gnz.backend.analizadores;

import gnz.backend.cuarteto.ManejadorDeCuartetos;
import gnz.frontend.editorDeTexto.EditorDeTextoFrame;
import java_cup.runtime.*;
import gnz.backend.errores.ManejadorDeErrores;
import gnz.backend.instrucciones.DeclaracionDeVariable;
import gnz.backend.instrucciones.ManejadorDeDeclaracion;
import gnz.backend.manejoDeDatos.*;
import gnz.backend.tablaDeSimbolos.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\004\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\004\003\000\002\005\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\003\003\000\002\020\005\000\002" +
    "\020\005\000\002\004\003\000\002\021\011\000\002\022" +
    "\005\000\002\022\003\000\002\023\003\000\002\004\003" +
    "\000\002\024\011\000\002\024\007\000\002\004\003\000" +
    "\002\025\007\000\002\025\005\000\002\004\003\000\002" +
    "\026\004\000\002\026\010\000\002\027\004\000\002\027" +
    "\003\000\002\030\011\000\002\004\003\000\002\031\011" +
    "\000\002\031\007\000\002\004\003\000\002\032\012\000" +
    "\002\004\003\000\002\033\015\000\002\033\013\000\002" +
    "\034\004\000\002\034\004\000\002\004\003\000\002\035" +
    "\006\000\002\035\006\000\002\036\005\000\002\036\003" +
    "\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\044\003\027\007\030\010\017\013\010\015" +
    "\007\016\006\017\004\020\022\021\042\025\021\051\013" +
    "\054\011\055\015\056\034\060\037\061\026\062\024\001" +
    "\002\000\006\007\ufff8\047\ufff8\001\002\000\044\002\000" +
    "\003\027\010\017\013\010\015\007\016\006\017\004\020" +
    "\022\021\042\025\021\051\013\054\011\055\015\056\034" +
    "\060\037\061\026\062\024\001\002\000\006\007\ufff9\047" +
    "\ufff9\001\002\000\006\007\ufffa\047\ufffa\001\002\000\006" +
    "\007\ufffb\047\ufffb\001\002\000\004\045\244\001\002\000" +
    "\052\002\uffc8\003\uffc8\010\uffc8\013\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\025\uffc8\050\uffc8\051\uffc8\052" +
    "\223\053\221\054\uffc8\055\uffc8\056\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\001\002\000\004\045\212\001\002\000\052\002" +
    "\uffcd\003\uffcd\010\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\025\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\001\002\000\004\047\203\001\002\000\004\007\056\001" +
    "\002\000\006\007\ufffc\047\ufffc\001\002\000\004\002\175" +
    "\001\002\000\006\007\ufffd\047\ufffd\001\002\000\006\007" +
    "\ufff7\047\ufff7\001\002\000\052\002\uffd7\003\uffd7\010\uffd7" +
    "\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\025" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\004\047" +
    "\172\001\002\000\052\002\uffc2\003\uffc2\010\uffc2\013\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\025\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\001\002\000\004\047\163\001" +
    "\002\000\052\002\ufff5\003\ufff5\010\ufff5\013\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\025\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\001\002\000\004\005\160\001\002\000" +
    "\052\002\uffb7\003\uffb7\010\uffb7\013\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\025\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\001\002\000\052\002\uffc5\003\uffc5\010\uffc5\013" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\025\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000\046\002\uffd0" +
    "\003\uffd0\010\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\025\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002\000\004\045" +
    "\055\001\002\000\046\002\ufffe\003\ufffe\010\ufffe\013\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\025\ufffe\050" +
    "\ufffe\051\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\001\002\000\052\002\uffb2\003\uffb2\010\uffb2\013" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\025\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000\022\010\017" +
    "\013\010\015\007\016\006\017\004\020\022\021\042\025" +
    "\021\001\002\000\052\002\uffbc\003\uffbc\010\uffbc\013\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\025\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\001\002\000\052\002\uffb9\003" +
    "\uffb9\010\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\025\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002" +
    "\000\006\007\ufff6\047\ufff6\001\002\000\004\047\044\001" +
    "\002\000\004\022\045\001\002\000\004\050\046\001\002" +
    "\000\004\007\047\001\002\000\006\004\uffc9\006\uffc9\001" +
    "\002\000\006\004\053\006\052\001\002\000\006\004\uffca" +
    "\006\uffca\001\002\000\004\007\047\001\002\000\052\002" +
    "\uffcc\003\uffcc\010\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\025\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\001\002\000\006\004\uffcb\006\uffcb\001\002\000\004\007" +
    "\056\001\002\000\012\004\uffd3\005\140\006\uffd3\057\uffd3" +
    "\001\002\000\004\057\060\001\002\000\020\007\073\014" +
    "\067\022\062\023\071\024\063\026\061\045\070\001\002" +
    "\000\112\002\uffe8\003\uffe8\004\uffe8\006\uffe8\010\uffe8\013" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\025\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\046\uffe8\050\uffe8\051\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\001\002\000\112" +
    "\002\uffec\003\uffec\004\uffec\006\uffec\010\uffec\013\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\025\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\046\uffec\050\uffec\051\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\001\002\000\112\002\uffea" +
    "\003\uffea\004\uffea\006\uffea\010\uffea\013\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\025\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\046\uffea" +
    "\050\uffea\051\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\001\002\000\004\057\124\001\002" +
    "\000\112\002\uffee\003\uffee\004\uffee\006\uffee\010\uffee\013" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\025\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\046\uffee\050\uffee\051\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\001\002\000\022" +
    "\027\103\031\104\034\111\035\113\036\114\037\115\040" +
    "\110\041\112\001\002\000\112\002\uffe9\003\uffe9\004\uffe9" +
    "\006\uffe9\010\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\050\uffe9\051\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\001\002\000\020\007\073\014\067\022\062\023\071" +
    "\024\063\026\061\045\070\001\002\000\112\002\uffeb\003" +
    "\uffeb\004\uffeb\006\uffeb\010\uffeb\013\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\025\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\050" +
    "\uffeb\051\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\001\002\000\112\002\ufff2\003\ufff2\004" +
    "\ufff2\006\ufff2\010\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\025\ufff2\027\ufff2\030\076\031\ufff2\032" +
    "\075\033\074\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\050\ufff2\051" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\001\002\000\112\002\uffed\003\uffed\004\uffed\006" +
    "\uffed\010\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\025\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\046\uffed\050\uffed\051\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\001\002\000\020\007\073\014\067\022\062\023\071\024" +
    "\063\026\061\045\070\001\002\000\020\007\073\014\067" +
    "\022\062\023\071\024\063\026\061\045\070\001\002\000" +
    "\020\007\073\014\067\022\062\023\071\024\063\026\061" +
    "\045\070\001\002\000\112\002\ufff1\003\ufff1\004\ufff1\006" +
    "\ufff1\010\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\025\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\046\ufff1\050\ufff1\051\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\001\002\000\112\002\ufff0\003\ufff0\004\ufff0\006\ufff0\010" +
    "\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\025\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\046\ufff0\050\ufff0\051\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\001\002" +
    "\000\112\002\uffef\003\uffef\004\uffef\006\uffef\010\uffef\013" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\025\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\046\uffef\050\uffef\051\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\001\002\000\010" +
    "\027\103\031\104\046\105\001\002\000\020\007\073\014" +
    "\067\022\062\023\071\024\063\026\061\045\070\001\002" +
    "\000\020\007\073\014\067\022\062\023\071\024\063\026" +
    "\061\045\070\001\002\000\112\002\uffe7\003\uffe7\004\uffe7" +
    "\006\uffe7\010\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\050\uffe7\051\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\001\002\000\112\002\ufff3\003\ufff3\004\ufff3\006\ufff3" +
    "\010\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\025\ufff3\027\ufff3\030\076\031\ufff3\032\075\033\074" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\046\ufff3\050\ufff3\051\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\001" +
    "\002\000\112\002\ufff4\003\ufff4\004\ufff4\006\ufff4\010\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\025" +
    "\ufff4\027\ufff4\030\076\031\ufff4\032\075\033\074\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\046\ufff4\050\ufff4\051\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000" +
    "\020\007\073\014\067\022\062\023\071\024\063\026\061" +
    "\045\070\001\002\000\020\007\073\014\067\022\062\023" +
    "\071\024\063\026\061\045\070\001\002\000\020\007\073" +
    "\014\067\022\062\023\071\024\063\026\061\045\070\001" +
    "\002\000\020\007\073\014\067\022\062\023\071\024\063" +
    "\026\061\045\070\001\002\000\020\007\073\014\067\022" +
    "\062\023\071\024\063\026\061\045\070\001\002\000\020" +
    "\007\073\014\067\022\062\023\071\024\063\026\061\045" +
    "\070\001\002\000\070\002\uffda\003\uffda\004\uffda\006\uffda" +
    "\010\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\025\uffda\027\103\031\104\042\uffda\043\uffda\044\uffda" +
    "\046\uffda\050\uffda\051\uffda\054\uffda\055\uffda\056\uffda\057" +
    "\uffda\060\uffda\061\uffda\062\uffda\001\002\000\070\002\uffdb" +
    "\003\uffdb\004\uffdb\006\uffdb\010\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\025\uffdb\027\103\031\104" +
    "\042\uffdb\043\uffdb\044\uffdb\046\uffdb\050\uffdb\051\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\001\002\000\070\002\uffdc\003\uffdc\004\uffdc\006\uffdc\010" +
    "\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\025\uffdc\027\103\031\104\042\uffdc\043\uffdc\044\uffdc\046" +
    "\uffdc\050\uffdc\051\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\001\002\000\070\002\uffd8\003" +
    "\uffd8\004\uffd8\006\uffd8\010\uffd8\013\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\025\uffd8\027\103\031\104\042" +
    "\uffd8\043\uffd8\044\uffd8\046\uffd8\050\uffd8\051\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\001" +
    "\002\000\070\002\uffdd\003\uffdd\004\uffdd\006\uffdd\010\uffdd" +
    "\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\025" +
    "\uffdd\027\103\031\104\042\uffdd\043\uffdd\044\uffdd\046\uffdd" +
    "\050\uffdd\051\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\001\002\000\070\002\uffd9\003\uffd9" +
    "\004\uffd9\006\uffd9\010\uffd9\013\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\025\uffd9\027\103\031\104\042\uffd9" +
    "\043\uffd9\044\uffd9\046\uffd9\050\uffd9\051\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\001\002" +
    "\000\006\027\125\031\127\001\002\000\004\022\137\001" +
    "\002\000\004\046\131\001\002\000\004\022\130\001\002" +
    "\000\004\046\uffb3\001\002\000\044\003\027\010\017\013" +
    "\010\015\007\016\006\017\004\020\022\021\042\025\021" +
    "\047\133\051\013\054\011\055\015\056\034\060\037\061" +
    "\026\062\024\001\002\000\052\002\uffb5\003\uffb5\010\uffb5" +
    "\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000\044\003" +
    "\027\007\030\010\017\013\010\015\007\016\006\017\004" +
    "\020\022\021\042\025\021\051\013\054\011\055\015\056" +
    "\034\060\037\061\026\062\024\001\002\000\044\003\027" +
    "\010\017\013\010\015\007\016\006\017\004\020\022\021" +
    "\042\025\021\050\135\051\013\054\011\055\015\056\034" +
    "\060\037\061\026\062\024\001\002\000\052\002\uffb6\003" +
    "\uffb6\010\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\025\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6\062\uffb6\001\002" +
    "\000\046\002\uffff\003\uffff\010\uffff\013\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\025\uffff\050\uffff\051\uffff" +
    "\054\uffff\055\uffff\056\uffff\060\uffff\061\uffff\062\uffff\001" +
    "\002\000\004\046\uffb4\001\002\000\026\007\073\011\142" +
    "\012\146\014\067\022\062\023\071\024\063\026\061\042" +
    "\150\045\070\001\002\000\064\002\uffe2\003\uffe2\004\uffe2" +
    "\006\uffe2\010\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\025\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2" +
    "\050\uffe2\051\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\001\002\000\064\002\uffdf\003\uffdf" +
    "\004\uffdf\006\uffdf\010\uffdf\013\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\025\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\046\uffdf\050\uffdf\051\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002\000\064\002\uffe4" +
    "\003\uffe4\004\uffe4\006\uffe4\010\uffe4\013\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\025\uffe4\042\155\043\uffe4" +
    "\044\uffe4\046\uffe4\050\uffe4\051\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000\064" +
    "\002\uffe0\003\uffe0\004\uffe0\006\uffe0\010\uffe0\013\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\025\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\046\uffe0\050\uffe0\051\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\001\002" +
    "\000\030\004\uffd2\006\uffd2\027\103\031\104\034\111\035" +
    "\113\036\114\037\115\040\110\041\112\057\uffd2\001\002" +
    "\000\064\002\uffde\003\uffde\004\uffde\006\uffde\010\uffde\013" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\025\uffde" +
    "\042\uffde\043\uffde\044\uffde\046\uffde\050\uffde\051\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\001\002\000\014\004\uffd1\006\uffd1\043\152\044\153\057" +
    "\uffd1\001\002\000\020\007\073\014\067\022\062\023\071" +
    "\024\063\026\061\045\070\001\002\000\064\002\uffe1\003" +
    "\uffe1\004\uffe1\006\uffe1\010\uffe1\013\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\025\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\046\uffe1\050\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002\000\026\007" +
    "\073\011\142\012\146\014\067\022\062\023\071\024\063" +
    "\026\061\042\150\045\070\001\002\000\026\007\073\011" +
    "\142\012\146\014\067\022\062\023\071\024\063\026\061" +
    "\042\150\045\070\001\002\000\064\002\uffe5\003\uffe5\004" +
    "\uffe5\006\uffe5\010\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\025\uffe5\042\155\043\uffe5\044\uffe5\046" +
    "\uffe5\050\uffe5\051\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\001\002\000\026\007\073\011" +
    "\142\012\146\014\067\022\062\023\071\024\063\026\061" +
    "\042\150\045\070\001\002\000\064\002\uffe3\003\uffe3\004" +
    "\uffe3\006\uffe3\010\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\025\uffe3\042\uffe3\043\uffe3\044\uffe3\046" +
    "\uffe3\050\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\001\002\000\064\002\uffe6\003" +
    "\uffe6\004\uffe6\006\uffe6\010\uffe6\013\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\025\uffe6\042\155\043\uffe6\044" +
    "\uffe6\046\uffe6\050\uffe6\051\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\001\002\000\026\007" +
    "\073\011\142\012\146\014\067\022\062\023\071\024\063" +
    "\026\061\042\150\045\070\001\002\000\066\002\uffcf\003" +
    "\uffcf\010\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\025\uffcf\027\103\031\104\034\111\035\113\036" +
    "\114\037\115\040\110\041\112\050\uffcf\051\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\060\uffcf\061\uffcf\062\uffcf\001\002\000" +
    "\052\002\uffce\003\uffce\010\uffce\013\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\025\uffce\043\152\044\153\050" +
    "\uffce\051\uffce\054\uffce\055\uffce\056\uffce\060\uffce\061\uffce" +
    "\062\uffce\001\002\000\020\007\073\014\067\022\062\023" +
    "\071\024\063\026\061\045\070\001\002\000\006\006\uffae" +
    "\050\uffae\001\002\000\006\006\uffad\050\uffad\001\002\000" +
    "\006\006\170\050\167\001\002\000\052\002\uffb1\003\uffb1" +
    "\010\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\025\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002\000" +
    "\020\007\073\014\067\022\062\023\071\024\063\026\061" +
    "\045\070\001\002\000\006\006\uffaf\050\uffaf\001\002\000" +
    "\020\007\073\014\067\022\062\023\071\024\063\026\061" +
    "\045\070\001\002\000\006\006\170\050\174\001\002\000" +
    "\052\002\uffb0\003\uffb0\010\uffb0\013\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\025\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\001\002\000\004\002\001\001\002\000\006\004" +
    "\uffd4\006\uffd4\001\002\000\006\004\201\006\200\001\002" +
    "\000\004\007\056\001\002\000\052\002\uffd6\003\uffd6\010" +
    "\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\025\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000\006" +
    "\004\uffd5\006\uffd5\001\002\000\044\003\027\007\030\010" +
    "\017\013\010\015\007\016\006\017\004\020\022\021\042" +
    "\025\021\051\013\054\011\055\015\056\034\060\037\061" +
    "\026\062\024\001\002\000\044\003\027\010\017\013\010" +
    "\015\007\016\006\017\004\020\022\021\042\025\021\050" +
    "\205\051\013\054\011\055\015\056\034\060\037\061\026" +
    "\062\024\001\002\000\004\054\206\001\002\000\004\045" +
    "\207\001\002\000\020\007\073\014\067\022\062\023\071" +
    "\024\063\026\061\045\070\001\002\000\004\046\211\001" +
    "\002\000\052\002\uffb8\003\uffb8\010\uffb8\013\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\025\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\001\002\000\026\007\073\011\142\012" +
    "\146\014\067\022\062\023\071\024\063\026\061\042\150" +
    "\045\070\001\002\000\010\043\152\044\153\046\214\001" +
    "\002\000\044\003\027\010\017\013\010\015\007\016\006" +
    "\017\004\020\022\021\042\025\021\047\216\051\013\054" +
    "\011\055\015\056\034\060\037\061\026\062\024\001\002" +
    "\000\052\002\uffc6\003\uffc6\010\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\025\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\001\002\000\044\003\027\007\030\010\017" +
    "\013\010\015\007\016\006\017\004\020\022\021\042\025" +
    "\021\051\013\054\011\055\015\056\034\060\037\061\026" +
    "\062\024\001\002\000\044\003\027\010\017\013\010\015" +
    "\007\016\006\017\004\020\022\021\042\025\021\050\220" +
    "\051\013\054\011\055\015\056\034\060\037\061\026\062" +
    "\024\001\002\000\052\002\uffc7\003\uffc7\010\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\025\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\001\002\000\044\003\027\010" +
    "\017\013\010\015\007\016\006\017\004\020\022\021\042" +
    "\025\021\047\241\051\013\054\011\055\015\056\034\060" +
    "\037\061\026\062\024\001\002\000\052\002\uffc1\003\uffc1" +
    "\010\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\025\uffc1\050\uffc1\051\uffc1\052\223\053\233\054\uffc1" +
    "\055\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000" +
    "\004\045\225\001\002\000\052\002\uffbe\003\uffbe\010\uffbe" +
    "\013\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\025" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000\026\007" +
    "\073\011\142\012\146\014\067\022\062\023\071\024\063" +
    "\026\061\042\150\045\070\001\002\000\010\043\152\044" +
    "\153\046\227\001\002\000\004\047\230\001\002\000\044" +
    "\003\027\007\030\010\017\013\010\015\007\016\006\017" +
    "\004\020\022\021\042\025\021\051\013\054\011\055\015" +
    "\056\034\060\037\061\026\062\024\001\002\000\044\003" +
    "\027\010\017\013\010\015\007\016\006\017\004\020\022" +
    "\021\042\025\021\050\232\051\013\054\011\055\015\056" +
    "\034\060\037\061\026\062\024\001\002\000\052\002\uffbd" +
    "\003\uffbd\010\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\025\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd\062\uffbd\001" +
    "\002\000\004\047\235\001\002\000\052\002\uffbf\003\uffbf" +
    "\010\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\025\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002\000" +
    "\044\003\027\007\030\010\017\013\010\015\007\016\006" +
    "\017\004\020\022\021\042\025\021\051\013\054\011\055" +
    "\015\056\034\060\037\061\026\062\024\001\002\000\044" +
    "\003\027\010\017\013\010\015\007\016\006\017\004\020" +
    "\022\021\042\025\021\050\237\051\013\054\011\055\015" +
    "\056\034\060\037\061\026\062\024\001\002\000\052\002" +
    "\uffc0\003\uffc0\010\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\025\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\001\002\000\052\002\uffc3\003\uffc3\010\uffc3\013\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\025\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\001\002\000\044\003\027\007\030" +
    "\010\017\013\010\015\007\016\006\017\004\020\022\021" +
    "\042\025\021\051\013\054\011\055\015\056\034\060\037" +
    "\061\026\062\024\001\002\000\044\003\027\010\017\013" +
    "\010\015\007\016\006\017\004\020\022\021\042\025\021" +
    "\050\243\051\013\054\011\055\015\056\034\060\037\061" +
    "\026\062\024\001\002\000\052\002\uffc4\003\uffc4\010\uffc4" +
    "\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\025" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\020\007" +
    "\073\014\067\022\062\023\071\024\063\026\061\045\070" +
    "\001\002\000\004\046\246\001\002\000\044\003\027\010" +
    "\017\013\010\015\007\016\006\017\004\020\022\021\042" +
    "\025\021\047\250\051\013\054\011\055\015\056\034\060" +
    "\037\061\026\062\024\001\002\000\052\002\uffba\003\uffba" +
    "\010\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\025\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\060\uffba\061\uffba\062\uffba\001\002\000" +
    "\044\003\027\007\030\010\017\013\010\015\007\016\006" +
    "\017\004\020\022\021\042\025\021\051\013\054\011\055" +
    "\015\056\034\060\037\061\026\062\024\001\002\000\044" +
    "\003\027\010\017\013\010\015\007\016\006\017\004\020" +
    "\022\021\042\025\021\050\252\051\013\054\011\055\015" +
    "\056\034\060\037\061\026\062\024\001\002\000\052\002" +
    "\uffbb\003\uffbb\010\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\025\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\036\002\017\003\004\004\034\005\022\006" +
    "\015\020\032\021\013\024\011\025\031\026\024\031\037" +
    "\032\040\033\030\035\035\001\001\000\002\001\001\000" +
    "\030\004\135\005\022\006\015\021\013\024\011\025\031" +
    "\026\024\031\037\032\040\033\030\035\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\221\030\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\176" +
    "\010\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\047\023\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\065\012\071\013\064\014\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\101\012\071\013\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\100\001\001\000\004\013\077\001\001\000" +
    "\004\013\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\106\013" +
    "\064\001\001\000\006\012\105\013\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\122\012\071\013\064\001\001\000\010\011\121\012\071" +
    "\013\064\001\001\000\010\011\120\012\071\013\064\001" +
    "\001\000\010\011\117\012\071\013\064\001\001\000\010" +
    "\011\116\012\071\013\064\001\001\000\010\011\115\012" +
    "\071\013\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\131\005\022\006\015\021\013\024\011\025\031" +
    "\026\024\031\037\032\040\033\030\035\035\001\001\000" +
    "\002\001\001\000\034\003\133\004\034\005\022\006\015" +
    "\020\032\021\013\024\011\025\031\026\024\031\037\032" +
    "\040\033\030\035\035\001\001\000\030\004\135\005\022" +
    "\006\015\021\013\024\011\025\031\026\024\031\037\032" +
    "\040\033\030\035\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\144\012\071\013" +
    "\064\014\143\015\146\016\142\017\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\065\012\071\013\064\014\150\001\001\000" +
    "\002\001\001\000\016\011\065\012\071\013\064\014\143" +
    "\016\156\017\140\001\001\000\016\011\065\012\071\013" +
    "\064\014\143\016\153\017\140\001\001\000\002\001\001" +
    "\000\014\011\065\012\071\013\064\014\143\017\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\160" +
    "\012\071\013\064\014\143\015\161\016\142\017\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\164" +
    "\036\165\037\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\164" +
    "\037\170\001\001\000\002\001\001\000\010\013\164\036" +
    "\172\037\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\203\004\034\005\022\006\015\020\032\021" +
    "\013\024\011\025\031\026\024\031\037\032\040\033\030" +
    "\035\035\001\001\000\030\004\135\005\022\006\015\021" +
    "\013\024\011\025\031\026\024\031\037\032\040\033\030" +
    "\035\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\065\012\071\013\064\014\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\065\012\071\013" +
    "\064\014\143\015\212\016\142\017\140\001\001\000\002" +
    "\001\001\000\030\004\214\005\022\006\015\021\013\024" +
    "\011\025\031\026\024\031\037\032\040\033\030\035\035" +
    "\001\001\000\002\001\001\000\034\003\216\004\034\005" +
    "\022\006\015\020\032\021\013\024\011\025\031\026\024" +
    "\031\037\032\040\033\030\035\035\001\001\000\030\004" +
    "\135\005\022\006\015\021\013\024\011\025\031\026\024" +
    "\031\037\032\040\033\030\035\035\001\001\000\002\001" +
    "\001\000\030\004\237\005\022\006\015\021\013\024\011" +
    "\025\031\026\024\031\037\032\040\033\030\035\035\001" +
    "\001\000\004\030\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\065\012\071\013\064\014\143\015" +
    "\225\016\142\017\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\230\004\034\005\022\006\015\020" +
    "\032\021\013\024\011\025\031\026\024\031\037\032\040" +
    "\033\030\035\035\001\001\000\030\004\135\005\022\006" +
    "\015\021\013\024\011\025\031\026\024\031\037\032\040" +
    "\033\030\035\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\235\004\034\005\022" +
    "\006\015\020\032\021\013\024\011\025\031\026\024\031" +
    "\037\032\040\033\030\035\035\001\001\000\030\004\135" +
    "\005\022\006\015\021\013\024\011\025\031\026\024\031" +
    "\037\032\040\033\030\035\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\241\004\034\005\022\006" +
    "\015\020\032\021\013\024\011\025\031\026\024\031\037" +
    "\032\040\033\030\035\035\001\001\000\030\004\135\005" +
    "\022\006\015\021\013\024\011\025\031\026\024\031\037" +
    "\032\040\033\030\035\035\001\001\000\002\001\001\000" +
    "\012\011\065\012\071\013\064\014\244\001\001\000\002" +
    "\001\001\000\030\004\246\005\022\006\015\021\013\024" +
    "\011\025\031\026\024\031\037\032\040\033\030\035\035" +
    "\001\001\000\002\001\001\000\034\003\250\004\034\005" +
    "\022\006\015\020\032\021\013\024\011\025\031\026\024" +
    "\031\037\032\040\033\030\035\035\001\001\000\030\004" +
    "\135\005\022\006\015\021\013\024\011\025\031\026\024" +
    "\031\037\032\040\033\030\035\035\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private EditorDeTextoFrame editor;
    private ManejadorDeTipos manejadorDeTipos;
    private ManejadorDeCuartetos manCuarteto;
    private ManejadorDeTablaDeSimbolos tablaDeSimbolos;

    public parser(AnalizadorLexicoCodigo lex,EditorDeTextoFrame editor,ManejadorDeCuartetos manCuarteto){
        super(lex);
        this.editor=editor;
        this.manCuarteto = manCuarteto;
        this.manejadorDeTipos = new ManejadorDeTipos(manCuarteto,editor);
        this.tablaDeSimbolos = new ManejadorDeTablaDeSimbolos(this.editor, this.manCuarteto);
    }
    
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        int columna = s.right;
        int linea = s.left;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        String estructura=(String)s.value;
        ManejadorDeErrores.mostrarErrorSintactico(editor.getErroresTextArea(), estructura, linea, columna,true,manCuarteto);

}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
        int columna = s.right;
        int linea = s.left;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        String estructura=(String)s.value;
        ManejadorDeErrores.mostrarErrorSintactico(editor.getErroresTextArea(), estructura, linea, columna,false,manCuarteto);
 }

    private DatoCodigo accionesParaExpresiones(DatoCodigo i,DatoCodigo e,Operacion operacion){
        Dato tipoMaximo=manejadorDeTipos.buscarDatoMayor(i, e);
        System.out.println("Tipo maximo es:"+tipoMaximo);
        manejadorDeTipos.asignarTipoDeDato(i,tipoMaximo);
        manejadorDeTipos.asignarTipoDeDato(e,tipoMaximo);
        return manejadorDeTipos.operarDatos(i,e,operacion);
    }
    
    




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipoDeVariable ::= STRING 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipoDeVariable ::= BOOLEAN 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipoDeVariable ::= CHAR 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoDeVariable ::= BYTE 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoDeVariable ::= INT 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoDeVariable ::= LONG 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoDeVariable ::= FLOAT 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoDeVariable ::= DOUBLE 
            {
              Dato[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tablaDeSimbolos.transformarDato(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // unaInstruccion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= expresion MAS t 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.MAS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= expresion MENOS t 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.MENOS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= t 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t ::= t POR f 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.POR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // t ::= t DIV f 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.DIV);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // t ::= t PORCENTAJE f 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=accionesParaExpresiones(i,e,Operacion.RESTO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // t ::= f 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // f ::= IDENTIFICADOR 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ElementoDeTablaDeSimbolos elemento=tablaDeSimbolos.buscarElemento(i);
    if(elemento==null){
    ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(),"Vaariable "+i+" no ha sido declarada", ileft, ileft,manCuarteto);
    RESULT=null;}//Error semantico, la variable no ha sido declarada
    else{DatoCodigo dato = new DatoCodigo(ileft,iright,elemento.getTipoBase(),elemento.getTipoNumerico(),i);
    RESULT=dato;
    }   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // f ::= NUMERO_ENTERO 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DatoNumerico datoNum=manejadorDeTipos.verificarDato(i);
      DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,datoNum,i);//verificar segun rangos
      RESULT= dato;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // f ::= NUMERO_DECIMAL 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,DatoNumerico.DOUBLE,i);
      RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // f ::= NUMERO_DECIMALF 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,DatoNumerico.FLOAT,i);
     RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // f ::= DECLARACION_CARACTER 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,null,i.substring(1,2));
     RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // f ::= DECLARACION_STRING 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.CADENA,null,i.substring(1,i.length()-1));
     RESULT=dato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // f ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              DatoCodigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DatoCodigo i = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("RECONOCIDO PARENTESIS");RESULT= i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= condicion AND j 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= condicion OR j 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= j 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // j ::= j NOT q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("j",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // j ::= q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("j",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // q ::= NOT comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // q ::= comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // q ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // q ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparacion ::= expresion MENOR expresion 
            {
              DatoCodigo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparacion ::= expresion MAYOR expresion 
            {
              DatoCodigo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              DatoCodigo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              DatoCodigo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= expresion DISTINTO_DE expresion 
            {
              DatoCodigo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparacion ::= expresion IGUAL_A expresion 
            {
              DatoCodigo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unaInstruccion ::= declaracionDeVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionDeVariables ::= tipoDeVariable conjuntoDeIdentificadoresParaVariables PCOMA 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato[] datos = (Dato[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DeclaracionDeVariable> lista = (ArrayList<DeclaracionDeVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
ManejadorDeDeclaracion manejador = new ManejadorDeDeclaracion(lista, manCuarteto, tablaDeSimbolos, editor);
manejador.crearVariableComoCuarteto(datosleft,datosright, (TipoDeDato)datos[0],(DatoNumerico)datos[1]);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conjuntoDeIdentificadoresParaVariables ::= conjuntoDeIdentificadoresParaVariables COMA unIdentificadorParaVariable 
            {
              ArrayList<DeclaracionDeVariable> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<DeclaracionDeVariable> lista = (ArrayList<DeclaracionDeVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionDeVariable e = (DeclaracionDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(e);
     RESULT= lista;  
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conjuntoDeIdentificadoresParaVariables ::= unIdentificadorParaVariable 
            {
              ArrayList<DeclaracionDeVariable> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionDeVariable f = (DeclaracionDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<DeclaracionDeVariable> lista= new ArrayList<>();
      lista.add(f);
      RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unIdentificadorParaVariable ::= IDENTIFICADOR 
            {
              DeclaracionDeVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  int n=manCuarteto.getNumeroDeTemporal()-1;
  DeclaracionDeVariable declaracion = new DeclaracionDeVariable(i,"t"+n,null);
  RESULT=declaracion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION expresion 
            {
              DeclaracionDeVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatoCodigo e = (DatoCodigo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  int n=manCuarteto.getNumeroDeTemporal()-1;
  DeclaracionDeVariable declaracion = new DeclaracionDeVariable(i,"t"+n,e);
  RESULT=declaracion;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION condicion 
            {
              DeclaracionDeVariable RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conjuntoDeInstrucciones ::= asignacionDeVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unaInstruccion ::= declaracionDeArreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracionDeArreglos ::= ARRAY tipoDeVariable CORCHETE_ABIERTO NUMERO_ENTERO CORCHETE_CERRADO conjuntoDeIdentificadoresParaArreglo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeArreglos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conjuntoDeIdentificadoresParaArreglo ::= conjuntoDeIdentificadoresParaArreglo COMA unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conjuntoDeIdentificadoresParaArreglo ::= unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unIdentificadorParaArreglo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unaInstruccion ::= declaracionDeEstructuraIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unaInstruccion ::= declaracionDeEstructuraIfElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unaInstruccion ::= declaracionDeEstructuraElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conjuntoDeElseIf ::= conjuntoDeElseIf unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conjuntoDeElseIf ::= unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unElseIf ::= ELSIF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unaInstruccion ::= declaracionDeEstructuraWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unaInstruccion ::= declaracionDeEstructuraDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionDeEstructuraDoWhile ::= DO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unaInstruccion ::= declaracionDeEstructuraFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO unIdentificadorParaVariable DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO unIdentificadorParaVariable DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // incrementoDecremento ::= MAS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // incrementoDecremento ::= MENOS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unaInstruccion ::= declaracionDeFuncionesPredefinidas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracionDeFuncionesPredefinidas ::= PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionDeFuncionesPredefinidas ::= PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conjuntoDeTexto ::= conjuntoDeTexto COMA unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conjuntoDeTexto ::= unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unTexto ::= f 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
