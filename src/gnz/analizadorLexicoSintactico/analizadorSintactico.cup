/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes

package gnz.backend.analizadores;

import gnz.backend.cuarteto.*;
import gnz.frontend.editorDeTexto.EditorDeTextoFrame;
import java_cup.runtime.*;
import gnz.backend.errores.ManejadorDeErrores;
import gnz.backend.instrucciones.*;
import gnz.backend.manejoDeDatos.*;
import gnz.backend.tablaDeSimbolos.*;
import java.util.ArrayList;

parser code {:
    
    private EditorDeTextoFrame editor;
    private ManejadorDeTipos manejadorDeTipos;
    private ManejadorDeCuartetos manCuarteto;
    private ManejadorDeTablaDeSimbolos tablaDeSimbolos;
    private Dato[] dato;
    private ManejadorDeDeclaracion manejadorDeclaracion;

    public parser(AnalizadorLexicoCodigo lex,EditorDeTextoFrame editor,ManejadorDeCuartetos manCuarteto){
        super(lex);
        this.editor=editor;
        this.manCuarteto = manCuarteto;
        this.manejadorDeTipos = new ManejadorDeTipos(manCuarteto,editor);
        this.tablaDeSimbolos = new ManejadorDeTablaDeSimbolos(this.editor, this.manCuarteto);
        this.manejadorDeclaracion = new ManejadorDeDeclaracion( manCuarteto, tablaDeSimbolos, editor);
    }
    
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        int columna = s.right;
        int linea = s.left;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        String estructura=(String)s.value;
        ManejadorDeErrores.mostrarErrorSintactico(editor.getErroresTextArea(), estructura, linea, columna,true,manCuarteto);

}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
        int columna = s.right;
        int linea = s.left;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        String estructura=(String)s.value;
        ManejadorDeErrores.mostrarErrorSintactico(editor.getErroresTextArea(), estructura, linea, columna,false,manCuarteto);
 }

    private DatoCodigo accionesParaExpresiones(DatoCodigo i,DatoCodigo e,Operacion operacion){
        Dato tipoMaximo=manejadorDeTipos.buscarDatoMayor(i, e);
        System.out.println("Tipo maximo es:"+tipoMaximo);
        manejadorDeTipos.asignarTipoDeDato(i,tipoMaximo);
        manejadorDeTipos.asignarTipoDeDato(e,tipoMaximo);
        return manejadorDeTipos.operarDatos(i,e,operacion);
    }
    
    


:}

/*--------------- 2da Area: Declaraciones -----------------------*/

terminal String     PCOMA;
terminal String     ASIGNACION,COMA;
terminal String     IDENTIFICADOR;
terminal String     BOOLEAN;
terminal String     TRUE,FALSE;
terminal String     CHAR;
terminal String     DECLARACION_CARACTER;
terminal String     BYTE,INT,LONG,FLOAT,DOUBLE;
terminal String     NUMERO_ENTERO,NUMERO_DECIMAL,NUMERO_DECIMALF;
terminal String     STRING;
terminal String     DECLARACION_STRING;

terminal String     MAS,POR,MENOS,DIV,PORCENTAJE;
terminal String     MENOR,MAYOR,MENOR_IGUAL,MAYOR_IGUAL,DISTINTO_DE,IGUAL_A;
terminal String     NOT,AND,OR;

terminal String     PARENTESIS_ABIERTO,PARENTESIS_CERRADO,CORCHETE_ABIERTO,CORCHETE_CERRADO;

terminal String     IF,ELSIF,ELSE;

terminal String     WHILE,DO;

terminal String     FOR,DOS_PUNTOS;

terminal String     ARRAY;

terminal String     PRINT,PRINTLN;

//terminal String     COMENTARIO_LINEA,COMENTARIO_DE_BLOQUE;


non terminal Object     inicio;
non terminal Object     conjuntoDeInstrucciones,unaInstruccion;

//******************************************************************Declaracion de variables******************************************

non terminal Object     declaracionDeVariables;
non terminal Dato[]     tipoDeVariable;
non terminal ArrayList<DeclaracionDeVariable>     conjuntoDeIdentificadoresParaVariables;
non terminal DeclaracionDeVariable unIdentificadorParaVariable;
non terminal DatoCodigo       expresion,t,f;

//******************************************************************Condicion y comparacion******************************************

non terminal DatoCodigo     comparacion;
non terminal DosEtiquetas condicion;


//******************************************************************Asignacion de variables******************************************

non terminal Object     asignacionDeVariable;

//******************************************************************Declaracion de arreglos******************************************

non terminal Object     declaracionDeArreglos;
non terminal String     unIdentificadorParaArreglo;
non terminal ArrayList<String>     conjuntoDeIdentificadoresParaArreglo;
non terminal Object asignacionDeArreglo;
//******************************************************************Declaracion de estructura If******************************************

non terminal Object     declaracionDeEstructuraIf;

//******************************************************************Declaracion de estructura IF-ELSE******************************************

non terminal Object     declaracionDeEstructuraIfElse;

//******************************************************************Declaracion de estructura ELSEIF******************************************

non terminal Object     declaracionDeEstructuraElseIf,conjuntoDeElseIf,unElseIf;


//******************************************************************Declaracion de estructura While******************************************

non terminal Object     declaracionDeEstructuraWhile;

//******************************************************************declaracion de estructura DoWhile********************************************

non terminal Object     declaracionDeEstructuraDoWhile;


//******************************************************************declaracion de estructura For********************************************

non terminal Object     declaracionDeEstructuraFor,incrementoDecremento;


//******************************************************************declaracion de funciones Predefinidas********************************************

non terminal Object     declaracionDeFuncionesPredefinidas,conjuntoDeTexto,unTexto;



/*--------------- 3ra Area: Reglas Semanticas -----------------------*/


precedence left ELSE;
precedence left ELSIF;
precedence left NOT, AND, OR;
precedence left MAS, MENOS;
precedence left POR, DIV,PORCENTAJE;
start with inicio;

//******************************************************************Inicio**********************************************************


inicio::= conjuntoDeInstrucciones;

conjuntoDeInstrucciones::=conjuntoDeInstrucciones unaInstruccion|unaInstruccion;

tipoDeVariable::=STRING:i {:dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;:};
tipoDeVariable::=BOOLEAN:i {:dato=tablaDeSimbolos.transformarDato("booleano");RESULT=dato;:};
tipoDeVariable::=CHAR:i {:dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;:};
tipoDeVariable::=BYTE:i {:dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;:};
tipoDeVariable::=INT:i {:dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;:};
tipoDeVariable::=LONG:i {:dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;:};
tipoDeVariable::=FLOAT:i {:dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;:};
tipoDeVariable::=DOUBLE:i {:dato=tablaDeSimbolos.transformarDato(i);RESULT=dato;:};

unaInstruccion::=error; 

//******************************************************************Expresion**********************************************************

expresion::=expresion:i MAS expresion:e {:RESULT=accionesParaExpresiones(i,e,Operacion.MAS);:};
expresion::=expresion:i MENOS expresion:e {:RESULT=accionesParaExpresiones(i,e,Operacion.MENOS);:};
expresion::=expresion:i POR expresion:e {:RESULT=accionesParaExpresiones(i,e,Operacion.POR);:};
expresion::=expresion:i DIV expresion:e {:RESULT=accionesParaExpresiones(i,e,Operacion.DIV);:};
expresion::=expresion:i PORCENTAJE expresion:e {:RESULT=accionesParaExpresiones(i,e,Operacion.RESTO);:};


expresion::=IDENTIFICADOR:i CORCHETE_ABIERTO expresion:num CORCHETE_CERRADO
{:
       ElementoDeTablaDeSimbolos elemento =tablaDeSimbolos.buscarElemento(i);
    if(num.getDatoNumerico()!=null && num.getDatoNumerico().ordinal()<=DatoNumerico.LONG.ordinal()){
            if(elemento!=null){//La variable existe 
        if( elemento.isEsArreglo()){
            //Se genera la temporal para el arreglo 
                String valorDeNum=num.getValor();
                if(num.getTemporal()!=null){
                    valorDeNum="t"+num.getTemporal();
                }
                Cuarteto c= new Cuarteto(null, i, valorDeNum,"t"+manCuarteto.generarTemporal(), TipoDeCuarteto.ASIGARREGLO);
                manCuarteto.getListaDeCuartetos().add(c);
                DatoCodigo dato = new DatoCodigo(ileft,iright,elemento.getTipoBase(),elemento.getTipoNumerico(),c.getResultado());
                RESULT =dato;
        }else{
           ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(),"Vaariable "+i+" no es un arreglo", ileft, ileft,manCuarteto);
        }
    }else{
        ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(),"Vaariable "+i+" no ha sido declarada", ileft, ileft,manCuarteto);
        RESULT=null;       
    }
    }else{
        String mensaje="El tamano del arreglo debe ser de tipo entero";
        ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, numleft, numright, manCuarteto);
    }
:};

expresion::=IDENTIFICADOR:i//Exactamente lo mismo, solo que se debe consultar su valor
    {:
    manCuarteto.setInicioDeExpresion();
    ElementoDeTablaDeSimbolos elemento=tablaDeSimbolos.buscarElemento(i);
    if(elemento==null){
        ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(),"Vaariable "+i+" no ha sido declarada", ileft, ileft,manCuarteto);
        RESULT=null;
    }else{//Error semantico, la variable no ha sido declarada
    if(!elemento.isEsArreglo()){
            DatoCodigo dato = new DatoCodigo(ileft,iright,elemento.getTipoBase(),elemento.getTipoNumerico(),i);
         RESULT=dato;
         }else{
             ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(),"Vaariable "+i+" es un arreglo", ileft, ileft,manCuarteto);
             RESULT =null;
         }
    }   
    :};

expresion::= NUMERO_ENTERO:i //Averiguar con los rangos
    {:
    manCuarteto.setInicioDeExpresion();
      DatoNumerico datoNum=manejadorDeTipos.verificarDato(i);
      DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,datoNum,i);//verificar segun rangos
      RESULT= dato;:};

expresion::=NUMERO_DECIMAL:i
    {:
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,DatoNumerico.DOUBLE,i);
      RESULT=dato;
    :};

expresion::=NUMERO_DECIMALF:i
    {:
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,DatoNumerico.FLOAT,i);
     RESULT=dato;
    :};

expresion::=DECLARACION_CARACTER:i
    {:
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.NUMERICO,null,i.substring(1,2));
     RESULT=dato;
    :};

expresion::=DECLARACION_STRING:i
    {:
    manCuarteto.setInicioDeExpresion();
    DatoCodigo dato= new DatoCodigo(ileft,iright,TipoDeDato.CADENA,null,i.substring(1,i.length()-1));
     RESULT=dato;
    :};

expresion::=PARENTESIS_ABIERTO expresion:i PARENTESIS_CERRADO
    {:System.out.println("RECONOCIDO PARENTESIS");RESULT= i;:};

//******************************************************************COndicion y Comparacion**********************************************************

condicion::= condicion:t1 AND 
                {:if(t1 !=null){//Es la primera condicion
                     if(t1.getTipoDeBoolean()!=null){
                       manCuarteto.crearCuartetoPrimeroParaComparacion(null,null,null,t1.getTipoDeBoolean());
                    }else{
                    manCuarteto.crearCuartetoPrimeroParaComparacion(t1.getOperacion(), t1.getDato1(), t1.getDato2(),false);
                    }
                }   
                :}
                condicion:t2 //Es la segunda parte de un AND
                {:
                if(t2.getTipoDeBoolean()!=null){
                    manCuarteto.crearSegundoCuartetoParaAnd(null,null,null,t2.getTipoDeBoolean());
                }else{
                   manCuarteto.crearSegundoCuartetoParaAnd(t2.getOperacion(), t2.getDato1(), t2.getDato2(),false);
                }
                RESULT =null;:};


condicion::= condicion:t1 OR 
                {:if(t1 !=null){//Es la primera condicion
                    if(t1.getTipoDeBoolean()!=null){
                       manCuarteto.crearCuartetoPrimeroParaComparacion(null,null,null,t1.getTipoDeBoolean());
                    }else{
                    manCuarteto.crearCuartetoPrimeroParaComparacion(t1.getOperacion(), t1.getDato1(), t1.getDato2(),false);
                    }
                }   
                :}
                condicion:t2 //Es la segunda parte de un OR
                {:
                if(t2.getTipoDeBoolean()!=null){
                    manCuarteto.crearSegundoCuartetoParaOr(null,null,null,t2.getTipoDeBoolean());
                }else{
                   manCuarteto.crearSegundoCuartetoParaOr(t2.getOperacion(), t2.getDato1(), t2.getDato2(),false);
                }
                RESULT =null;:};

condicion::= NOT condicion:t1;

condicion::=TRUE:i 
{:
	DosEtiquetas dosEtiquetas = new DosEtiquetas(null, null, true, null,false,null,null);
        RESULT= dosEtiquetas;
:};

condicion::=FALSE:e
{:
        DosEtiquetas dosEtiquetas = new DosEtiquetas(null, null, false, null,false,null,null);
        RESULT= dosEtiquetas;
:};

condicion::=expresion:ex1 MENOR expresion:ex2//Aca se daca el temporal de cada expresion
{: RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MENOR,true,editor,manCuarteto);:};//Verificar que sea de tipo numerico

condicion::=expresion:ex1 MAYOR expresion:ex2
{: RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MAYOR,true,editor,manCuarteto);:};

condicion::=expresion:ex1 MENOR_IGUAL expresion:ex2
{: RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MENORIGUAL,true,editor,manCuarteto);:};

condicion::=expresion:ex1 MAYOR_IGUAL expresion:ex2
{: RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.MAYORIGUAL,true,editor,manCuarteto);:};

condicion::=expresion:ex1 DISTINTO_DE expresion:ex2
{: RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.DISTINTODE,true,editor,manCuarteto);:};

condicion::=expresion:ex1 IGUAL_A expresion:ex2
{: RESULT=new DosEtiquetas(ex1,ex2,null,Operacion.IGUALA,true,editor,manCuarteto);:};

//************************************************************************INSTRUCCIONES*****************************************************
//******************************************************************Declaracion de variables******************************************

unaInstruccion::=declaracionDeVariables;

declaracionDeVariables::= tipoDeVariable:datos conjuntoDeIdentificadoresParaVariables:lista PCOMA
{:
//ManejadorDeDeclaracion manejador = new ManejadorDeDeclaracion(lista, manCuarteto, tablaDeSimbolos, editor);
//manejador.crearVariableComoCuarteto(datosleft,datosright, (TipoDeDato)datos[0],(DatoNumerico)datos[1]);
:};

conjuntoDeIdentificadoresParaVariables::=conjuntoDeIdentificadoresParaVariables:lista COMA unIdentificadorParaVariable:e
   {:lista.add(e);
     RESULT= lista;  
   :} 
    | 
    unIdentificadorParaVariable:f
    {:ArrayList<DeclaracionDeVariable> lista= new ArrayList<>();
      lista.add(f);
      RESULT = lista;
    :};

unIdentificadorParaVariable::=IDENTIFICADOR:i
{:
  int n=manCuarteto.getNumeroDeTemporal()-1;
  DeclaracionDeVariable declaracion = new DeclaracionDeVariable(i,"t"+n,null);
  manejadorDeclaracion.verificarYCrearTipoDeVariable(false,ileft, iright, declaracion, (TipoDeDato)dato[0], (DatoNumerico)dato[1],null);
  RESULT=declaracion;:};

unIdentificadorParaVariable::=IDENTIFICADOR:i ASIGNACION expresion:e//Aqui debe realizar la respectiva comprobacion de tipo,crear la variable, y guardarla en la tabla
{:
                 DeclaracionDeVariable declaracion;
                if(e!=null){
                 if(e.getTemporal()==null){//Solo viene un id|num, solo uno
                declaracion = new DeclaracionDeVariable(i, null, e);
                }else{
                    int n=manCuarteto.getNumeroDeTemporal()-1;
                    declaracion = new DeclaracionDeVariable(i,"t"+n,e);
                }
                    manejadorDeclaracion.crearVariableComoCuarteto(false,declaracion,ileft,iright, (TipoDeDato)dato[0],(DatoNumerico)dato[1]);
                    RESULT=declaracion;
                 }
:};

unIdentificadorParaVariable::=IDENTIFICADOR:i ASIGNACION condicion:dosEtiquetas
{:
               TipoDeDato d= (TipoDeDato)dato[0];
                if(d==TipoDeDato.BOOLEANO){
                    if(dosEtiquetas!=null){
                        manCuarteto.crearCuartetoPrimeroParaComparacion(dosEtiquetas.getOperacion(), dosEtiquetas.getDato1(),dosEtiquetas.getDato2(),dosEtiquetas.getTipoDeBoolean());
                    }
                    manejadorDeclaracion.asignarValorABooleano(true,i, ileft, iright);
                }else{
                    String mensaje="No se puede transaformar a booleano";
                  ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, ileft, iright, manCuarteto);
                }

:};

//******************************************************************Asignacion de variables******************************************

unaInstruccion::=asignacionDeVariable;

asignacionDeVariable::=IDENTIFICADOR:nombreVariable ASIGNACION expresion:datoCodigo PCOMA
{:
 ElementoDeTablaDeSimbolos elemento = tablaDeSimbolos.buscarElemento(nombreVariable);
    if(elemento==null){
        String mensaje="La variable "+nombreVariable+ " no ha sido declarada";
        ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, nombreVariableleft, nombreVariableright, manCuarteto);
    }else{
        DeclaracionDeVariable declaracion;
         if(datoCodigo!=null){
                 if(datoCodigo.getTemporal()==null){//Solo viene un id|num, solo uno
                declaracion = new DeclaracionDeVariable(nombreVariable, null, datoCodigo);
                }else{
                    int n=manCuarteto.getNumeroDeTemporal()-1;
                    declaracion = new DeclaracionDeVariable(nombreVariable,"t"+n,datoCodigo);
                }
                    manejadorDeclaracion.crearVariableComoCuarteto(true,declaracion,nombreVariableleft,nombreVariableright, elemento.getTipoBase(),elemento.getTipoNumerico());
                    RESULT=declaracion;
                 }
    }
:};

asignacionDeVariable::=IDENTIFICADOR:nombreVariable ASIGNACION condicion:dosEtiquetas PCOMA
{:
    
    ElementoDeTablaDeSimbolos elemento = tablaDeSimbolos.buscarElemento(nombreVariable);
    if(elemento==null){
        String mensaje="El arreglo "+nombreVariable+ " no ha sido declarado";
        ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, nombreVariableleft, nombreVariableright, manCuarteto);
    }else{
 if(elemento.getTipoBase()==TipoDeDato.BOOLEANO){
                    if(dosEtiquetas!=null){
                        manCuarteto.crearCuartetoPrimeroParaComparacion(dosEtiquetas.getOperacion(), dosEtiquetas.getDato1(),dosEtiquetas.getDato2(),dosEtiquetas.getTipoDeBoolean());
                    }
               manejadorDeclaracion.asignarValorABooleano(false,nombreVariable, nombreVariableleft, nombreVariableright);

                }else{
                    String mensaje="No se puede transaformar a booleano";
                  ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, nombreVariableleft, nombreVariableright, manCuarteto);
                }
    }
:};


//******************************************************************Declaracion de arreglos******************************************

unaInstruccion::=declaracionDeArreglos;

declaracionDeArreglos::= ARRAY tipoDeVariable:i CORCHETE_ABIERTO expresion:num CORCHETE_CERRADO conjuntoDeIdentificadoresParaArreglo:lista PCOMA
{:
 String valorDeNum;
if(num.getDatoNumerico()!=null && num.getDatoNumerico().ordinal()<=DatoNumerico.LONG.ordinal()){
    if(num.getTemporal()==null){
        valorDeNum=num.getValor();
    }else{
        valorDeNum="t"+num.getTemporal();
    }
    manejadorDeclaracion.declararArreglo(lista, ileft, iright, (TipoDeDato)dato[0], (DatoNumerico)dato[1], valorDeNum);
}else{
    String mensaje="EL valor numerico debe ser entero";
    ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, numleft, numright, manCuarteto);
}

:};

conjuntoDeIdentificadoresParaArreglo::=conjuntoDeIdentificadoresParaArreglo:lista COMA unIdentificadorParaArreglo:nombre 
{:
    lista.add(nombre);
    RESULT= lista;
:}
     |

unIdentificadorParaArreglo:nombre
{:
    ArrayList<String> identificadores= new ArrayList<>();
                identificadores.add(nombre);
                RESULT=identificadores;
:};

unIdentificadorParaArreglo::=IDENTIFICADOR:i {:RESULT=i;:};

//******************************************************************Asignacion de arreglos******************************************

unaInstruccion::=asignacionDeArreglo;

asignacionDeArreglo::= IDENTIFICADOR:i CORCHETE_ABIERTO expresion:num CORCHETE_CERRADO ASIGNACION expresion:asignacion PCOMA
{:
              ElementoDeTablaDeSimbolos elemento = tablaDeSimbolos.buscarElemento(i);
                if(elemento==null){
                    String mensaje="La variable "+i+" no ha sido declarada";
                    ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, ileft,iright, manCuarteto);
                }else{
                       if(num.getDatoNumerico()!=null && num.getDatoNumerico().ordinal()<=DatoNumerico.LONG.ordinal()){
                        String valorDeNum;
                        if(num.getTemporal()==null){
                           valorDeNum=num.getValor();
                        }else{
                           valorDeNum="t"+num.getTemporal();
                        }
                        manejadorDeclaracion.asignarValorAArreglo(asignacion,elemento,i, valorDeNum, elemento.getTipoBase(), elemento.getTipoNumerico(), ileft, iright);
                        
                        }else{
                              String mensaje="La posicion "+i+" debe ser de tipo numerico no decimal";
                              ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, ileft,iright, manCuarteto);
                       }
                }
:};

asignacionDeArreglo::= IDENTIFICADOR:i CORCHETE_ABIERTO expresion:num CORCHETE_CERRADO ASIGNACION condicion:cond PCOMA
{:
    ElementoDeTablaDeSimbolos elemento = tablaDeSimbolos.buscarElemento(i);
    if(elemento==null){//NO se ha declarado la variable o no es del tipo booleano
        String mensaje="La variable "+i+" no ha sido declarada";
        ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, ileft,iright, manCuarteto);
    }else if(elemento.getTipoBase()!=TipoDeDato.BOOLEANO){
        String mensaje="La variable "+i+" es de tipo BOOLEANO";
        ManejadorDeErrores.mostrarErrorSemantico(editor.getErroresTextArea(), mensaje, ileft,iright, manCuarteto);
    }else{
        String posicion=num.getValor();
        if(num.getTemporal()!=null){
            posicion=num.getTemporal();
        }
        if(cond!=null){
                        manCuarteto.crearCuartetoPrimeroParaComparacion(cond.getOperacion(), cond.getDato1(),cond.getDato2(),cond.getTipoDeBoolean());
                    }
        manejadorDeclaracion.darValorABooleano(i+"["+posicion+"]", ileft, iright);
    }
    
:};

//******************************************************************Declaracion de estructura IF******************************************

unaInstruccion::=declaracionDeEstructuraIf;

declaracionDeEstructuraIf::=IF PARENTESIS_ABIERTO condicion:c  PARENTESIS_CERRADO {::} CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO;

declaracionDeEstructuraIf::=IF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO unaInstruccion;

//******************************************************************Declaracion de estructura IF-ELSE******************************************

unaInstruccion::=declaracionDeEstructuraIfElse;

declaracionDeEstructuraIfElse::=declaracionDeEstructuraIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO;//Falta una instruccion

declaracionDeEstructuraIfElse::=declaracionDeEstructuraIf ELSE  unaInstruccion ;//Falta una instruccion


//******************************************************************Declaracion de estructura ELSEIF******************************************

unaInstruccion::=declaracionDeEstructuraElseIf;

declaracionDeEstructuraElseIf::=declaracionDeEstructuraIf conjuntoDeElseIf;

declaracionDeEstructuraElseIf::=declaracionDeEstructuraIf conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO;


conjuntoDeElseIf::=conjuntoDeElseIf unElseIf | unElseIf;

unElseIf::=ELSIF PARENTESIS_ABIERTO condicion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO;



//******************************************************************Declaracion de estructura WHILE******************************************

unaInstruccion::=declaracionDeEstructuraWhile;

declaracionDeEstructuraWhile::=WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO;

declaracionDeEstructuraWhile::=WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion;

//******************************************************************Declaracion de estructura DO WHILE******************************************

unaInstruccion::=declaracionDeEstructuraDoWhile;

declaracionDeEstructuraDoWhile::=DO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO;

//******************************************************************Declaracion de estructura FOR******************************************

unaInstruccion::=declaracionDeEstructuraFor;

declaracionDeEstructuraFor::=FOR PARENTESIS_ABIERTO unIdentificadorParaVariable DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO
                                CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO;

declaracionDeEstructuraFor::=FOR PARENTESIS_ABIERTO unIdentificadorParaVariable DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO unaInstruccion;

incrementoDecremento::= MAS NUMERO_ENTERO;

incrementoDecremento::= MENOS NUMERO_ENTERO;

//******************************************************************Funciones predefinidas******************************************

unaInstruccion::=declaracionDeFuncionesPredefinidas;//PRINT,PRINTLN

declaracionDeFuncionesPredefinidas::=PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO;

declaracionDeFuncionesPredefinidas::=PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO;

conjuntoDeTexto::=conjuntoDeTexto COMA unTexto|unTexto;

unTexto::=f;